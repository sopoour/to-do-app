{"version":3,"sources":["components/NewToDo/ToDoForm.module.css","components/ToDos/ToDoItem.module.css","components/UI/Section.module.css","components/ToDos/ToDos.module.css","components/UI/Section.js","components/ToDos/ToDoItem.js","components/ToDos/ToDos.js","hooks/use-input.js","components/NewToDo/ToDoForm.js","components/NewToDo/NewToDo.js","App.js","index.js"],"names":["module","exports","Section","props","className","classes","section","children","ToDoItem","task","text","title","description","onClick","onRemove","ToDos","taskList","items","length","map","toDo","id","removeItem","filter","onRemoveToDo","handleRemove","content","container","useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","handleValueChange","event","target","handleInputBlur","reset","isNotEmpty","trim","ToDoForm","enteredTitle","enteredNameIsValid","titleHasError","handleTitleChange","handleTitleBlur","titleReset","enteredDescription","enteredDescriptionIsValid","descriptionHasError","handleDescriptionChange","handleDescriptionBlur","descriptionReset","formIsValid","form","onSubmit","preventDefault","console","log","onEnterToDo","inputArea","type","onChange","onBlur","errorText","disabled","NewToDo","toDoTitle","toDoDescription","newToDo","Math","random","onAddToDo","App","savedToDos","localStorage","getItem","JSON","parse","toDos","setToDos","useEffect","setItem","stringify","Fragment","style","color","textAlign","fontSize","prevToDos","filteredTasks","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27261b28.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ToDoForm_form__2zwIl\",\"inputArea\":\"ToDoForm_inputArea__9guhb\",\"errorText\":\"ToDoForm_errorText__3_FD8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"ToDoItem_task__1s_S2\",\"text\":\"ToDoItem_text__24L36\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3QN43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ToDos_container__1BaRk\"};","import classes from './Section.module.css';\n\nconst Section = (props) => {\n  return <section className={classes.section}>{props.children}</section>;\n};\n\nexport default Section;\n","import classes from \"./ToDoItem.module.css\";\n\nconst ToDoItem = (props) => {\n  return (\n    <li className={classes.task}>\n      <div className={classes.text}>\n        <h1>{props.task.title}</h1>\n        <p>{props.task.description}</p>\n      </div>\n      <button onClick={props.onRemove}>Remove</button>\n    </li>\n  );\n};\n\nexport default ToDoItem;\n","import Section from \"../UI/Section\";\nimport ToDoItem from \"./ToDoItem\";\nimport classes from \"./ToDos.module.css\";\n\nconst ToDos = (props) => {\n  const handleRemove = (id) => {\n    //remove the item from the task lists that matches the id where the remove button was clicked\n    const removeItem = props.items.filter((toDo) => {\n      //return the filtered task array without the removed task\n      return toDo.id !== id;\n    });\n    props.onRemoveToDo(removeItem);\n  };\n\n  let taskList = <h2>No to dos found. Start adding some!</h2>;\n\n  if (props.items.length > 0) {\n    taskList = (\n      <ul>\n        {props.items.map((toDo) => (\n          <ToDoItem\n            key={toDo.id}\n            task={toDo}\n            onRemove={() => handleRemove(toDo.id)}\n          ></ToDoItem>\n        ))}\n      </ul>\n    );\n  }\n\n  let content = taskList;\n\n  return (\n    <Section>\n      <div className={classes.container}>{content}</div>\n    </Section>\n  );\n};\n\nexport default ToDos;\n","import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  //check validity of enteredValue\n  const valueIsValid = validateValue(enteredValue);\n  //show error message under respective input field if the value is not valid and the user clicked into the field\n  const hasError = !valueIsValid && isTouched;\n\n  const handleValueChange = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  const handleInputBlur = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    handleValueChange,\n    handleInputBlur,\n    reset,\n  };\n};\n\nexport default useInput;\n","import React from \"react\";\n\nimport classes from \"./ToDoForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nconst isNotEmpty = (value) => {\n  return value.trim() !== \"\";\n};\n\nconst ToDoForm = (props) => {\n  const {\n    value: enteredTitle,\n    isValid: enteredNameIsValid,\n    hasError: titleHasError,\n    handleValueChange: handleTitleChange,\n    handleInputBlur: handleTitleBlur,\n    reset: titleReset,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredDescription,\n    isValid: enteredDescriptionIsValid,\n    hasError: descriptionHasError,\n    handleValueChange: handleDescriptionChange,\n    handleInputBlur: handleDescriptionBlur,\n    reset: descriptionReset,\n  } = useInput(isNotEmpty);\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredDescriptionIsValid) {\n    formIsValid = true;\n  }\n\n  const handleSubmit = (event) => {\n    //prevent that request is sent and that the page reloads when I click on \"add task\" button\n    event.preventDefault();\n\n    //when form is not valid then exit\n    if (!formIsValid) {\n      return;\n    }\n    console.log(enteredTitle);\n    //if form is valid then submit data\n    props.onEnterToDo(enteredTitle, enteredDescription);\n    titleReset();\n    descriptionReset();\n  };\n\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.inputArea}>\n        <div>\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={handleTitleChange}\n            onBlur={handleTitleBlur}\n          />\n          {titleHasError && (\n            <p className={classes.errorText}>Title must not be empty.</p>\n          )}\n        </div>\n        <div>\n          <label>Description</label>\n          <input\n            type=\"text\"\n            value={enteredDescription}\n            onChange={handleDescriptionChange}\n            onBlur={handleDescriptionBlur}\n          />\n          {descriptionHasError && (\n            <p className={classes.errorText}>Description must not be empty.</p>\n          )}\n        </div>\n      </div>\n\n      <button disabled={!formIsValid}>Add To-Do</button>\n    </form>\n  );\n};\n\nexport default ToDoForm;\n","import React from \"react\";\n\nimport Section from \"../UI/Section\";\nimport ToDoForm from \"./ToDoForm\";\n\nconst NewToDo = (props) => {\n  \n\n  const handleEnterToDo = (toDoTitle, toDoDescription) => {\n    const newToDo = {\n      id: toDoTitle.length + Math.random(),\n      title: toDoTitle,\n      description: toDoDescription,\n    }\n    props.onAddToDo(newToDo);\n  };\n\n  return (\n    <Section>\n      <ToDoForm onEnterToDo={handleEnterToDo} />\n    </Section>\n  );\n};\n\nexport default NewToDo;\n","import React, { useEffect, useState } from \"react\";\n\nimport ToDos from \"./components/ToDos/ToDos\";\nimport NewToDo from \"./components/NewToDo/NewToDo\";\n\nfunction App() {\n  const [toDos, setToDos] = useState(() => {\n    // get the todos from localstorage\n    const savedToDos = localStorage.getItem(\"todos\");\n    // if there are todos stored\n    if (savedToDos) {\n      // return the parsed JSON object back to a javascript object\n      return JSON.parse(savedToDos);\n    } else {\n      // return an empty array\n      return [];\n    }\n  });\n\n  const handleAddToDo = (toDo) => {\n    setToDos((prevToDos) => {\n      return [toDo, ...prevToDos];\n    });\n  };\n\n  const handleRemoveToDo = (filteredTasks) => {\n    setToDos(filteredTasks);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(toDos));\n  }, [toDos]);\n\n  return (\n    <React.Fragment>\n      <h1 style={{ color: \"white\", textAlign: \"center\", fontSize: \"2.2rem\" }}>\n        My Simple To Do List\n      </h1>\n      <NewToDo onAddToDo={handleAddToDo} />\n      <ToDos items={toDos} onRemoveToDo={handleRemoveToDo} />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}